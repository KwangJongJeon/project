위임생성자 : 생성자가 다른 생성자를 사용하는것. 
같은 기능을 하는 함수는 하나만 있는게 좋기에
 오버로딩을 이용해서 위임생성자 기능을 이용한다.

소멸자 :
- 클래스가 소멸될때 호출되는 함수. 
- ~CLASSNAME() 과 같은 식으로 사용함 파라미터는 없음.
- 중괄호 영역을 벗어날 때 호출됨.
- CPP에서는 delete해줄 때 자주 쓰임. ex) 배열 delete[] m_arr
- 불안하면 그냥 vector를 쓰자.

this 포인터와 연쇄 호출
- 클래스 -> 인스턴스 
      찍어냄

- 어떻게 분간? this pointer 이용 ( 자기 자신의 주소 )
- 함수는 모든 인스턴스가 공유하는데 이를 분간하기 위해 
  함수에 this->가 숨어있음. setID(1)를 호출한다고하면
- setID(&s2, 4)처럼 들어간다고 생각하면 됨.

Chaining member function
- Calc& add(int value) { m_value += value; return *this; }
- Calc& sub(int value) { m_value -= value; return *this; } 
- Calc cal(10);
- calc.add(10).sub(5);
이런식으로 쓸 수 있다.

- template을 구현한다거나 할 때는 헤더에 코드를 넣는 경우도 있음.
클래스의 instance를 const로 설정하면
멤버 함수에 int getValue() const { return m_value; }
와 같은 함수만 사용할 수 있다. 안에있는 m_value의 값을 바꾸지 않는다는 뜻

- const로 막아둘 수 있는 곳은 전부 const로 막아두자.

- class내에서 파라미터에 인스턴스가 복사될경우, 다음과 같은 copy constructor가 호출된다.
Something(const Something& st_in)
{
    m_value = st_in.m_value;
}

- 파라미터에 복사가되는걸 막으려면 const TypeName &parameterName을 쓰면 좋다.
함수에 const선언을하면 리턴타입에도 const를 사용하는것이 일반적이다.

정적 멤버변수 
static
클래스 내부에서 static 변수. extern등 앞에있는 강의 참고.
클래스에서 유래된 모든 인스턴스가 static value를 공유하게 됨.
static member의 경우 define in cpp, cpp안에다가 정의하자. 안그럼 에러남


