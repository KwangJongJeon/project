#include <catch2/catch>

SCENARIO("Unit can move around board") {
	GIVEN("Unit is in somewhere middle of board") {
		여기서 주어진 상황이니까
		유닛을 생성해서 주면 됨
		MovableUnit unit(1,1);
		아 컨스트럭터 안썻는데 알아서 페어로 하는게 더좋을듯
		WHEN("Unit moves upward") {
			unit.move(0,1)
			THEN("Unit moved up") {
			사실 ... 유닛 무브드업 이거 체크하기가 좀 어렵긴한데
			편의상 curpos같은거 만들어도됨
			REQUIRE(잘 체크한다);
			}
			다시 아래로
			
		}
		WHEN("Unit moves upward")
		WHEN("Unit moves upward")
		WHEN("Unit moves upward")
	}
	봐바 ㅏ그럼 이런 특수한 상황이 있을수 있는데 
	GIVEN("Unit is at edge of board") {
		여기에 대해서도 적고
	}
	
	GIVEN("Theres another unit next to unit") {
		WHEN("Unit tries to move to there") {
			THEN("Unit attacks") {
				
			}
		}
	}
}
일단 이정도?ㅇㅇㅇㅇㅇㅇ
일단 테스트해야하는 경우들을 적어놓은 거임
임
그러면 이제 봐봐
일단 유닛이 이동을 해야되는데ㅇㅇ
그러면 그 기능을 하는 퍼블릭 메소드 하나만들고

class I_Unit {
public:
	virtual void move(const std::pair<int, int>) = 0;
	
	virtual ~I_Unit() {};
};
이렇게 모든 퍼블릭 메소드를 퓨어 버츄얼로 만들고
실제로 이걸 직접 구현하는 소스파일은 없는게
인터페잇이스 개념임
말그대로 다른클래스에서는 이 인터페이스를 가지고잇다는거고

일단 가장 중요한
이동을 하는 유닛을 만들어보면

//가장 기본적인 기능인 움직이는 기능만을 가지고있는
//말그대로 movable unit


class MoableUnit: public I_Unit {
public:
	void move(const std::pair<int, int>) override;

priavte:
	std::pair<int, int> _pos;
}

아 다음 테스트로 넘어가기전에 위 클래스 소스까지 써서 테스트 통과해야됨
이제 다음테스트인 경계를 안넘어가는 테스트잖아?
그러면 경계를 안넘어가는 유닛을 또 일단 써
아니 편의상 그러는거임

class BoundUnit: public I_Unit{
public:
	void move(const std::pair<int, int>) override;

private:
	MovableUnit movableUnit;
	
	pair<int, int> border
}봐봐 저렇게 아까 쓴 클래스 재활용 하는거임
여기서
중요요한한게
아니다
어쨋든 소스에서

BoundUnit::move(pair value) {
	여기서 이제 자기가 들고있는 경계랑
	들고있는 무버블 유닛의 위치 비교해서
	movableUnit을 어떻게 움직일지 판단가능하겠지?
	그러면 또 기능 구현 한거임
}

이게 결국 
유닛이 움직이는 기능만 있는건 같은데
그 움직일때 어떤 행동들을 하느냐가 다른거잖아?
가장 기본적이 행동인 정말 딱 움직이는 기능을하는 클래스를 구현하고
그거를가지고 다른 클래스들이 활용하고
이런식으로 하는거임
이제 옆에 있는 몬스터를 공격하는 유닛을 만든다고해봐



값입력받고 assert같은걸로 제한할까
ㄴㄴ 아마 크기는 가변할꺼같은데 직사각형도있을듯
ㅇㅇ 그거도 좋은듯
이제 잘 생각을 해봐
경계를 어떻게 정의해줄지
어케할래
2차원이니까
....
일단 경계가 어디인지 유닛이 알아야 안넘어가니까 멤버로 들어가는건 당연한데
그 멤버의 형태를 어케할지 생각중중
정사각형으로 만들거임?아니면 또 pair로 받고 그 페어랑(0,0)이랑 직사각형 만드는방식으로?

물론 테스트는 통과한 상태임
ㅇㅋㅇㅋ 아 글고 궁금한게 
지금 요렇게 작은 기능단위로 클래스쪼개는게 
실제로 구현이 이렇게되는거임 아니면 테스트 끝나면 전부 합침?
ㅇㅎ ㅇㅋㅇㅋ 함 해봄
class AttackingUnit: public I_Unit {
public:
	move
private:
	boundunit
	ATK
	HP
}
공격이니까 hp를 가지고잇어야되겟네 공격력이랑
이제 소스에서 움직일때 옆에 몬스터가 있는지 판단이 가능해야되는데
그러면 보드의 상태에대한 정보도 있어야되니까
관련한걸 또 멤버로 들고있으면되고
그걸로 판단해서 움직일지 안안움직이고 공격하게 할지 하며됨
실제로 구현을 이런식으로함